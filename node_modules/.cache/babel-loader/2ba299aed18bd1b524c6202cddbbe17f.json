{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport axios from '@/utils/axios';\n\nconst initialState = () => ({\n  isCalendarLotFormDisable: false,\n  calendarLotFormOpen: false,\n  isUmiopEdited: false,\n  createLotError: null,\n  createLotDate: {},\n  lot: {\n    shippingDate: '',\n    factory: {\n      multiplicity: null,\n      name: ''\n    },\n    product: {\n      name: ''\n    },\n    status: {},\n    regions: [],\n    priceMin: '',\n    isResold: false,\n    resoldInLot: false\n  },\n  getLotStatus: {},\n  lots: null,\n  isSaleButtonClicked: false\n});\n\nconst state = initialState;\nconst mutations = {\n  resetState(state) {\n    Object.assign(state, initialState());\n  },\n\n  lotFormStart(state, payload) {\n    state.lot = {};\n    state.calendarLotFormOpen = true;\n    state.isCalendarLotFormDisable = false;\n    state.createLotDate = payload;\n  },\n\n  lotFormSuccess(state) {\n    state.calendarLotFormOpen = false;\n  },\n\n  lotFormFailure(state, payload) {\n    state.isCalendarLotFormDisable = true;\n    state.createLotError = payload;\n  },\n\n  lotFormClose(state) {\n    state.calendarLotFormOpen = false;\n    state.isCalendarLotFormDisable = false;\n    state.isSaleButtonClicked = false;\n    state.lot = {};\n  },\n\n  lotFormEdit(state, payload) {\n    state.lot = payload;\n    state.calendarLotFormOpen = true;\n  },\n\n  setLotIsUmiopEdited(state) {\n    state.isUmiopEdited = true;\n  },\n\n  setLot(state, payload) {\n    state.lot = payload;\n  },\n\n  setLotFormToSale(state, payload) {\n    state.lot = payload;\n    state.calendarLotFormOpen = true;\n  },\n\n  // todo: Логика формы кандидат на рефакторинг. Коммиты предназначены только для dev tools.\n  // в текущей реализации может использоваться для отслеживания коммитов. В частности в CalendarLotForm.vue\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  getListSuccess() {},\n\n  setLots(state, payload) {\n    state.lots = payload;\n  },\n\n  setIsSaleButtonClicked(state, {\n    value\n  }) {\n    state.isSaleButtonClicked = value;\n  }\n\n};\nconst actions = {\n  resetState({\n    commit\n  }) {\n    commit('resetState');\n  },\n\n  getListByMounts(context, confirmData) {\n    axios.post('rest/trading/lot/getListByMounts/', confirmData).then(response => {\n      context.commit('setLots', response.data); //   context.commit('getListSuccess')\n    }).catch(error => {\n      console.log('getListByMounts error => ', error);\n    }).finally(() => this.loading = false);\n  },\n\n  add(context, confirmData) {\n    axios.post('rest/trading/lot/add/', confirmData).then(() => {\n      context.commit('lotFormSuccess');\n    }).catch(error => {\n      context.commit('lotFormFailure', error);\n    }).finally(() => this.loading = false);\n  },\n\n  edit(context, confirmData) {\n    axios.post('rest/trading/lot/edit/', confirmData).then(() => {\n      context.commit('lotFormSuccess');\n    }).catch(error => {\n      context.commit('lotFormFailure', error);\n    }).finally(() => this.loading = false);\n  },\n\n  delete(context, confirmData) {\n    axios.post('rest/trading/lot/delete/', confirmData).then(() => {\n      context.commit('lotFormSuccess');\n    }).catch(error => {\n      context.commit('lotFormFailure', error);\n      console.log('delete lot error => ', error);\n    }).finally(() => this.loading = false);\n  },\n\n  async getById(context, confirmData) {\n    try {\n      const response = await axios.post('rest/trading/lot/getById/', {\n        id: confirmData.id\n      });\n      context.commit('setLot', response.data);\n    } catch (error) {\n      if (error.response.status === 404) {\n        throw new Error(error.response.data.message);\n      }\n\n      console.log('lot getById error => ', error);\n    }\n  },\n\n  setUmiopCheckStatusById(context, id) {\n    axios.post('rest/trading/lot/setUmiopCheckStatusById/', {\n      id: id\n    }).then(() => {\n      context.commit('getListSuccess');\n    }).catch(error => {\n      console.log('lot setUmiopCheckStatusById error => ', error);\n    });\n  },\n\n  confirmDescriptionByTrader(context, id) {\n    axios.post('rest/trading/lot/confirmDescriptionByTrader/', {\n      id: id\n    }).then(() => {\n      context.commit('getListSuccess');\n    }).catch(error => {\n      console.log('lot confirmDescriptionByTrader error => ', error);\n    });\n  },\n\n  confirmDescriptionByUmiop(context, id) {\n    axios.post('rest/trading/lot/confirmDescriptionByUmiop/', {\n      id: id,\n      isUmiopEdited: context.state.isUmiopEdited\n    }).then(() => {\n      context.commit('getListSuccess');\n    }).catch(error => {\n      console.log('lot confirmDescriptionByUmiop error => ', error);\n    });\n  },\n\n  lotFormToSale(context, lot) {\n    context.commit('setLotFormToSale', lot);\n    context.commit('getListSuccess');\n  }\n\n};\nconst getters = {};\nconst setters = {};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters,\n  setters\n};","map":{"version":3,"names":["axios","initialState","isCalendarLotFormDisable","calendarLotFormOpen","isUmiopEdited","createLotError","createLotDate","lot","shippingDate","factory","multiplicity","name","product","status","regions","priceMin","isResold","resoldInLot","getLotStatus","lots","isSaleButtonClicked","state","mutations","resetState","Object","assign","lotFormStart","payload","lotFormSuccess","lotFormFailure","lotFormClose","lotFormEdit","setLotIsUmiopEdited","setLot","setLotFormToSale","getListSuccess","setLots","setIsSaleButtonClicked","value","actions","commit","getListByMounts","context","confirmData","post","then","response","data","catch","error","console","log","finally","loading","add","edit","delete","getById","id","Error","message","setUmiopCheckStatusById","confirmDescriptionByTrader","confirmDescriptionByUmiop","lotFormToSale","getters","setters","namespaced"],"sources":["C:/openserver/domains/U190001472_BitumMap_Vue/src/store/modules/trading/lot.js"],"sourcesContent":["import axios from '@/utils/axios';\r\n\r\nconst initialState = () => ({\r\n  isCalendarLotFormDisable: false,\r\n  calendarLotFormOpen: false,\r\n  isUmiopEdited: false,\r\n  createLotError: null,\r\n  createLotDate: {},\r\n  lot: {\r\n    shippingDate: '',\r\n    factory: {\r\n      multiplicity: null,\r\n      name: '',\r\n    },\r\n    product: {\r\n      name: '',\r\n    },\r\n    status: {},\r\n    regions: [],\r\n    priceMin: '',\r\n    isResold: false,\r\n    resoldInLot: false,\r\n  },\r\n  getLotStatus: {},\r\n  lots: null,\r\n  isSaleButtonClicked: false,\r\n});\r\n\r\nconst state = initialState;\r\n\r\nconst mutations = {\r\n  resetState(state) {\r\n    Object.assign(state, initialState());\r\n  },\r\n\r\n  lotFormStart(state, payload) {\r\n    state.lot = {};\r\n    state.calendarLotFormOpen = true;\r\n    state.isCalendarLotFormDisable = false;\r\n    state.createLotDate = payload;\r\n  },\r\n  lotFormSuccess(state) {\r\n    state.calendarLotFormOpen = false;\r\n  },\r\n  lotFormFailure(state, payload) {\r\n    state.isCalendarLotFormDisable = true;\r\n    state.createLotError = payload;\r\n  },\r\n  lotFormClose(state) {\r\n    state.calendarLotFormOpen = false;\r\n    state.isCalendarLotFormDisable = false;\r\n    state.isSaleButtonClicked = false;\r\n    state.lot = {};\r\n  },\r\n  lotFormEdit(state, payload) {\r\n    state.lot = payload;\r\n    state.calendarLotFormOpen = true;\r\n  },\r\n  setLotIsUmiopEdited(state) {\r\n    state.isUmiopEdited = true;\r\n  },\r\n  setLot(state, payload) {\r\n    state.lot = payload;\r\n  },\r\n  setLotFormToSale(state, payload) {\r\n    state.lot = payload;\r\n    state.calendarLotFormOpen = true;\r\n  },\r\n\r\n  // todo: Логика формы кандидат на рефакторинг. Коммиты предназначены только для dev tools.\r\n  // в текущей реализации может использоваться для отслеживания коммитов. В частности в CalendarLotForm.vue\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  getListSuccess() {},\r\n  setLots(state, payload) {\r\n    state.lots = payload;\r\n  },\r\n  setIsSaleButtonClicked(state, { value }) {\r\n    state.isSaleButtonClicked = value;\r\n  },\r\n};\r\n\r\nconst actions = {\r\n  resetState({ commit }) {\r\n    commit('resetState');\r\n  },\r\n\r\n  getListByMounts(context, confirmData) {\r\n    axios\r\n      .post('rest/trading/lot/getListByMounts/', confirmData)\r\n      .then((response) => {\r\n        context.commit('setLots', response.data);\r\n        //   context.commit('getListSuccess')\r\n      })\r\n      .catch((error) => {\r\n        console.log('getListByMounts error => ', error);\r\n      })\r\n      .finally(() => (this.loading = false));\r\n  },\r\n  add(context, confirmData) {\r\n    axios\r\n      .post('rest/trading/lot/add/', confirmData)\r\n      .then(() => {\r\n        context.commit('lotFormSuccess');\r\n      })\r\n      .catch((error) => {\r\n        context.commit('lotFormFailure', error);\r\n      })\r\n      .finally(() => (this.loading = false));\r\n  },\r\n  edit(context, confirmData) {\r\n    axios\r\n      .post('rest/trading/lot/edit/', confirmData)\r\n      .then(() => {\r\n        context.commit('lotFormSuccess');\r\n      })\r\n      .catch((error) => {\r\n        context.commit('lotFormFailure', error);\r\n      })\r\n      .finally(() => (this.loading = false));\r\n  },\r\n  delete(context, confirmData) {\r\n    axios\r\n      .post('rest/trading/lot/delete/', confirmData)\r\n      .then(() => {\r\n        context.commit('lotFormSuccess');\r\n      })\r\n      .catch((error) => {\r\n        context.commit('lotFormFailure', error);\r\n        console.log('delete lot error => ', error);\r\n      })\r\n      .finally(() => (this.loading = false));\r\n  },\r\n  async getById(context, confirmData) {\r\n    try {\r\n      const response = await axios.post('rest/trading/lot/getById/', {\r\n        id: confirmData.id,\r\n      });\r\n      context.commit('setLot', response.data);\r\n    } catch (error) {\r\n      if (error.response.status === 404) {\r\n        throw new Error(error.response.data.message);\r\n      }\r\n      console.log('lot getById error => ', error);\r\n    }\r\n  },\r\n  setUmiopCheckStatusById(context, id) {\r\n    axios\r\n      .post('rest/trading/lot/setUmiopCheckStatusById/', { id: id })\r\n      .then(() => {\r\n        context.commit('getListSuccess');\r\n      })\r\n      .catch((error) => {\r\n        console.log('lot setUmiopCheckStatusById error => ', error);\r\n      });\r\n  },\r\n  confirmDescriptionByTrader(context, id) {\r\n    axios\r\n      .post('rest/trading/lot/confirmDescriptionByTrader/', { id: id })\r\n      .then(() => {\r\n        context.commit('getListSuccess');\r\n      })\r\n      .catch((error) => {\r\n        console.log('lot confirmDescriptionByTrader error => ', error);\r\n      });\r\n  },\r\n  confirmDescriptionByUmiop(context, id) {\r\n    axios\r\n      .post('rest/trading/lot/confirmDescriptionByUmiop/', {\r\n        id: id,\r\n        isUmiopEdited: context.state.isUmiopEdited,\r\n      })\r\n      .then(() => {\r\n        context.commit('getListSuccess');\r\n      })\r\n      .catch((error) => {\r\n        console.log('lot confirmDescriptionByUmiop error => ', error);\r\n      });\r\n  },\r\n  lotFormToSale(context, lot) {\r\n    context.commit('setLotFormToSale', lot);\r\n    context.commit('getListSuccess');\r\n  },\r\n};\r\n\r\nconst getters = {};\r\n\r\nconst setters = {};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters,\r\n  setters,\r\n};\r\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,eAAlB;;AAEA,MAAMC,YAAY,GAAG,OAAO;EAC1BC,wBAAwB,EAAE,KADA;EAE1BC,mBAAmB,EAAE,KAFK;EAG1BC,aAAa,EAAE,KAHW;EAI1BC,cAAc,EAAE,IAJU;EAK1BC,aAAa,EAAE,EALW;EAM1BC,GAAG,EAAE;IACHC,YAAY,EAAE,EADX;IAEHC,OAAO,EAAE;MACPC,YAAY,EAAE,IADP;MAEPC,IAAI,EAAE;IAFC,CAFN;IAMHC,OAAO,EAAE;MACPD,IAAI,EAAE;IADC,CANN;IASHE,MAAM,EAAE,EATL;IAUHC,OAAO,EAAE,EAVN;IAWHC,QAAQ,EAAE,EAXP;IAYHC,QAAQ,EAAE,KAZP;IAaHC,WAAW,EAAE;EAbV,CANqB;EAqB1BC,YAAY,EAAE,EArBY;EAsB1BC,IAAI,EAAE,IAtBoB;EAuB1BC,mBAAmB,EAAE;AAvBK,CAAP,CAArB;;AA0BA,MAAMC,KAAK,GAAGpB,YAAd;AAEA,MAAMqB,SAAS,GAAG;EAChBC,UAAU,CAACF,KAAD,EAAQ;IAChBG,MAAM,CAACC,MAAP,CAAcJ,KAAd,EAAqBpB,YAAY,EAAjC;EACD,CAHe;;EAKhByB,YAAY,CAACL,KAAD,EAAQM,OAAR,EAAiB;IAC3BN,KAAK,CAACd,GAAN,GAAY,EAAZ;IACAc,KAAK,CAAClB,mBAAN,GAA4B,IAA5B;IACAkB,KAAK,CAACnB,wBAAN,GAAiC,KAAjC;IACAmB,KAAK,CAACf,aAAN,GAAsBqB,OAAtB;EACD,CAVe;;EAWhBC,cAAc,CAACP,KAAD,EAAQ;IACpBA,KAAK,CAAClB,mBAAN,GAA4B,KAA5B;EACD,CAbe;;EAchB0B,cAAc,CAACR,KAAD,EAAQM,OAAR,EAAiB;IAC7BN,KAAK,CAACnB,wBAAN,GAAiC,IAAjC;IACAmB,KAAK,CAAChB,cAAN,GAAuBsB,OAAvB;EACD,CAjBe;;EAkBhBG,YAAY,CAACT,KAAD,EAAQ;IAClBA,KAAK,CAAClB,mBAAN,GAA4B,KAA5B;IACAkB,KAAK,CAACnB,wBAAN,GAAiC,KAAjC;IACAmB,KAAK,CAACD,mBAAN,GAA4B,KAA5B;IACAC,KAAK,CAACd,GAAN,GAAY,EAAZ;EACD,CAvBe;;EAwBhBwB,WAAW,CAACV,KAAD,EAAQM,OAAR,EAAiB;IAC1BN,KAAK,CAACd,GAAN,GAAYoB,OAAZ;IACAN,KAAK,CAAClB,mBAAN,GAA4B,IAA5B;EACD,CA3Be;;EA4BhB6B,mBAAmB,CAACX,KAAD,EAAQ;IACzBA,KAAK,CAACjB,aAAN,GAAsB,IAAtB;EACD,CA9Be;;EA+BhB6B,MAAM,CAACZ,KAAD,EAAQM,OAAR,EAAiB;IACrBN,KAAK,CAACd,GAAN,GAAYoB,OAAZ;EACD,CAjCe;;EAkChBO,gBAAgB,CAACb,KAAD,EAAQM,OAAR,EAAiB;IAC/BN,KAAK,CAACd,GAAN,GAAYoB,OAAZ;IACAN,KAAK,CAAClB,mBAAN,GAA4B,IAA5B;EACD,CArCe;;EAuChB;EACA;EACA;EACAgC,cAAc,GAAG,CAAE,CA1CH;;EA2ChBC,OAAO,CAACf,KAAD,EAAQM,OAAR,EAAiB;IACtBN,KAAK,CAACF,IAAN,GAAaQ,OAAb;EACD,CA7Ce;;EA8ChBU,sBAAsB,CAAChB,KAAD,EAAQ;IAAEiB;EAAF,CAAR,EAAmB;IACvCjB,KAAK,CAACD,mBAAN,GAA4BkB,KAA5B;EACD;;AAhDe,CAAlB;AAmDA,MAAMC,OAAO,GAAG;EACdhB,UAAU,CAAC;IAAEiB;EAAF,CAAD,EAAa;IACrBA,MAAM,CAAC,YAAD,CAAN;EACD,CAHa;;EAKdC,eAAe,CAACC,OAAD,EAAUC,WAAV,EAAuB;IACpC3C,KAAK,CACF4C,IADH,CACQ,mCADR,EAC6CD,WAD7C,EAEGE,IAFH,CAESC,QAAD,IAAc;MAClBJ,OAAO,CAACF,MAAR,CAAe,SAAf,EAA0BM,QAAQ,CAACC,IAAnC,EADkB,CAElB;IACD,CALH,EAMGC,KANH,CAMUC,KAAD,IAAW;MAChBC,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,KAAzC;IACD,CARH,EASGG,OATH,CASW,MAAO,KAAKC,OAAL,GAAe,KATjC;EAUD,CAhBa;;EAiBdC,GAAG,CAACZ,OAAD,EAAUC,WAAV,EAAuB;IACxB3C,KAAK,CACF4C,IADH,CACQ,uBADR,EACiCD,WADjC,EAEGE,IAFH,CAEQ,MAAM;MACVH,OAAO,CAACF,MAAR,CAAe,gBAAf;IACD,CAJH,EAKGQ,KALH,CAKUC,KAAD,IAAW;MAChBP,OAAO,CAACF,MAAR,CAAe,gBAAf,EAAiCS,KAAjC;IACD,CAPH,EAQGG,OARH,CAQW,MAAO,KAAKC,OAAL,GAAe,KARjC;EASD,CA3Ba;;EA4BdE,IAAI,CAACb,OAAD,EAAUC,WAAV,EAAuB;IACzB3C,KAAK,CACF4C,IADH,CACQ,wBADR,EACkCD,WADlC,EAEGE,IAFH,CAEQ,MAAM;MACVH,OAAO,CAACF,MAAR,CAAe,gBAAf;IACD,CAJH,EAKGQ,KALH,CAKUC,KAAD,IAAW;MAChBP,OAAO,CAACF,MAAR,CAAe,gBAAf,EAAiCS,KAAjC;IACD,CAPH,EAQGG,OARH,CAQW,MAAO,KAAKC,OAAL,GAAe,KARjC;EASD,CAtCa;;EAuCdG,MAAM,CAACd,OAAD,EAAUC,WAAV,EAAuB;IAC3B3C,KAAK,CACF4C,IADH,CACQ,0BADR,EACoCD,WADpC,EAEGE,IAFH,CAEQ,MAAM;MACVH,OAAO,CAACF,MAAR,CAAe,gBAAf;IACD,CAJH,EAKGQ,KALH,CAKUC,KAAD,IAAW;MAChBP,OAAO,CAACF,MAAR,CAAe,gBAAf,EAAiCS,KAAjC;MACAC,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,KAApC;IACD,CARH,EASGG,OATH,CASW,MAAO,KAAKC,OAAL,GAAe,KATjC;EAUD,CAlDa;;EAmDd,MAAMI,OAAN,CAAcf,OAAd,EAAuBC,WAAvB,EAAoC;IAClC,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAM9C,KAAK,CAAC4C,IAAN,CAAW,2BAAX,EAAwC;QAC7Dc,EAAE,EAAEf,WAAW,CAACe;MAD6C,CAAxC,CAAvB;MAGAhB,OAAO,CAACF,MAAR,CAAe,QAAf,EAAyBM,QAAQ,CAACC,IAAlC;IACD,CALD,CAKE,OAAOE,KAAP,EAAc;MACd,IAAIA,KAAK,CAACH,QAAN,CAAejC,MAAf,KAA0B,GAA9B,EAAmC;QACjC,MAAM,IAAI8C,KAAJ,CAAUV,KAAK,CAACH,QAAN,CAAeC,IAAf,CAAoBa,OAA9B,CAAN;MACD;;MACDV,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,KAArC;IACD;EACF,CA/Da;;EAgEdY,uBAAuB,CAACnB,OAAD,EAAUgB,EAAV,EAAc;IACnC1D,KAAK,CACF4C,IADH,CACQ,2CADR,EACqD;MAAEc,EAAE,EAAEA;IAAN,CADrD,EAEGb,IAFH,CAEQ,MAAM;MACVH,OAAO,CAACF,MAAR,CAAe,gBAAf;IACD,CAJH,EAKGQ,KALH,CAKUC,KAAD,IAAW;MAChBC,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqDF,KAArD;IACD,CAPH;EAQD,CAzEa;;EA0Eda,0BAA0B,CAACpB,OAAD,EAAUgB,EAAV,EAAc;IACtC1D,KAAK,CACF4C,IADH,CACQ,8CADR,EACwD;MAAEc,EAAE,EAAEA;IAAN,CADxD,EAEGb,IAFH,CAEQ,MAAM;MACVH,OAAO,CAACF,MAAR,CAAe,gBAAf;IACD,CAJH,EAKGQ,KALH,CAKUC,KAAD,IAAW;MAChBC,OAAO,CAACC,GAAR,CAAY,0CAAZ,EAAwDF,KAAxD;IACD,CAPH;EAQD,CAnFa;;EAoFdc,yBAAyB,CAACrB,OAAD,EAAUgB,EAAV,EAAc;IACrC1D,KAAK,CACF4C,IADH,CACQ,6CADR,EACuD;MACnDc,EAAE,EAAEA,EAD+C;MAEnDtD,aAAa,EAAEsC,OAAO,CAACrB,KAAR,CAAcjB;IAFsB,CADvD,EAKGyC,IALH,CAKQ,MAAM;MACVH,OAAO,CAACF,MAAR,CAAe,gBAAf;IACD,CAPH,EAQGQ,KARH,CAQUC,KAAD,IAAW;MAChBC,OAAO,CAACC,GAAR,CAAY,yCAAZ,EAAuDF,KAAvD;IACD,CAVH;EAWD,CAhGa;;EAiGde,aAAa,CAACtB,OAAD,EAAUnC,GAAV,EAAe;IAC1BmC,OAAO,CAACF,MAAR,CAAe,kBAAf,EAAmCjC,GAAnC;IACAmC,OAAO,CAACF,MAAR,CAAe,gBAAf;EACD;;AApGa,CAAhB;AAuGA,MAAMyB,OAAO,GAAG,EAAhB;AAEA,MAAMC,OAAO,GAAG,EAAhB;AAEA,eAAe;EACbC,UAAU,EAAE,IADC;EAEb9C,KAFa;EAGbC,SAHa;EAIbiB,OAJa;EAKb0B,OALa;EAMbC;AANa,CAAf"},"metadata":{},"sourceType":"module"}