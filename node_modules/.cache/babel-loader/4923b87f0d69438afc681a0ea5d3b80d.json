{"ast":null,"code":"import { mapState as mapStatePinia } from 'pinia';\nimport { useUserStore } from '@/stores/user';\nimport { mapGetters, mapState, mapActions } from 'vuex';\nexport default {\n  name: 'ConfirmDescription',\n\n  data() {\n    return {\n      isSubmitting: false\n    };\n  },\n\n  computed: { ...mapStatePinia(useUserStore, ['isTrader', 'isUmiop']),\n    ...mapGetters({\n      offerList: 'offer/offerListWithEdited'\n    }),\n    ...mapState({\n      lot: state => state.lot.lot,\n      umiop: state => state.offer.umiop // offerList: state => state.offer.offerList,\n\n    }),\n\n    isDisableButton() {\n      const offersConfirmOrCancelledUmiop = this.offerList.filter(offer => offer.status.code === 'umiop_done' || offer.status.code === 'umiop_cancelled');\n\n      if (this.umiop.showUmiop && this.isTrader || this.lot.status.code === 'umiop_check' && this.isTrader || this.lot.status.code === 'processing' && this.isUmiop || this.lot.status.code === 'receiving' || this.lot.status.code === 'waiting' || offersConfirmOrCancelledUmiop.length > 0 && this.isUmiop) {\n        return true;\n      }\n\n      return false;\n    },\n\n    buttonText() {\n      if (this.isUmiop) {\n        return 'Согласовать распределение';\n      } else {\n        return 'Подтвердить распределение';\n      }\n    },\n\n    isReceivingStatusLot() {\n      return this.lot.status.code === 'receiving';\n    },\n\n    isWaitingStatusLot() {\n      return this.lot.status.code === 'waiting';\n    },\n\n    isCompletedStatusLot() {\n      return this.lot.status.code === 'completed';\n    },\n\n    isCancelledStatusLot() {\n      return this.lot.status.code === 'cancelled';\n    },\n\n    showFooter() {\n      if (this.isCompletedStatusLot || this.isCancelledStatusLot || this.isReceivingStatusLot || this.isWaitingStatusLot) {\n        return false;\n      }\n\n      return true;\n    }\n\n  },\n  methods: { ...mapActions('offer', ['resetEditedOffers']),\n\n    onSubmit() {\n      this.resetEditedOffers();\n      this.isSubmitting = true;\n\n      if (this.isTrader) {\n        this.confirmDescriptionByTrader();\n      } else if (this.isUmiop) {\n        this.confirmDescriptionByUmiop();\n      }\n\n      setTimeout(() => {\n        this.$store.dispatch('lot/getById', {\n          id: this.lot.id\n        });\n        this.$store.dispatch('offer/getListByLotId', this.lot.id);\n        this.isSubmitting = false;\n      }, 1000);\n      this.resetEditedOffers();\n    },\n\n    confirmDescriptionByTrader() {\n      this.$store.dispatch('lot/confirmDescriptionByTrader', this.lot.id);\n      this.$store.dispatch('offer/confirmDescriptionByTrader', this.offerList);\n    },\n\n    confirmDescriptionByUmiop() {\n      this.$store.dispatch('offer/confirmDescriptionByUmiop', this.lot.id); // Edited offers is first, because \"isUmiopEdited\" maybe set\n\n      this.$store.dispatch('lot/confirmDescriptionByUmiop', this.lot.id);\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["mapState","mapStatePinia","useUserStore","mapGetters","mapActions","name","data","isSubmitting","computed","offerList","lot","state","umiop","offer","isDisableButton","offersConfirmOrCancelledUmiop","filter","status","code","showUmiop","isTrader","isUmiop","length","buttonText","isReceivingStatusLot","isWaitingStatusLot","isCompletedStatusLot","isCancelledStatusLot","showFooter","methods","onSubmit","resetEditedOffers","confirmDescriptionByTrader","confirmDescriptionByUmiop","setTimeout","$store","dispatch","id"],"sourceRoot":"","sources":["C:\\openserver\\domains\\U190001472_BitumMap_Vue\\src\\components\\layouts\\main\\footer\\ConfirmDescription.vue"],"sourcesContent":["<template>\r\n  <div v-if=\"showFooter && offerList?.length\" class=\"confirm-distribution\">\r\n    <ElButton\r\n      v-if=\"this.offerList.length\"\r\n      @click=\"onSubmit()\"\r\n      class=\"confirm-distribution__button\"\r\n      :class=\"isDisableButton ? 'confirm-distribution__button_disable' : ''\"\r\n      :disabled=\"isDisableButton\"\r\n      :loading=\"isSubmitting\"\r\n      size=\"large\"\r\n    >\r\n      {{ buttonText }}\r\n    </ElButton>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState as mapStatePinia } from 'pinia';\r\nimport { useUserStore } from '@/stores/user';\r\nimport { mapGetters, mapState, mapActions } from 'vuex';\r\n\r\nexport default {\r\n  name: 'ConfirmDescription',\r\n  data() {\r\n    return {\r\n      isSubmitting: false,\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapStatePinia(useUserStore, ['isTrader', 'isUmiop']),\r\n    ...mapGetters({\r\n      offerList: 'offer/offerListWithEdited',\r\n    }),\r\n    ...mapState({\r\n      lot: (state) => state.lot.lot,\r\n      umiop: (state) => state.offer.umiop,\r\n      // offerList: state => state.offer.offerList,\r\n    }),\r\n    isDisableButton() {\r\n      const offersConfirmOrCancelledUmiop = this.offerList.filter(\r\n        (offer) =>\r\n          offer.status.code === 'umiop_done' ||\r\n          offer.status.code === 'umiop_cancelled'\r\n      );\r\n      if (\r\n        (this.umiop.showUmiop && this.isTrader) ||\r\n        (this.lot.status.code === 'umiop_check' && this.isTrader) ||\r\n        (this.lot.status.code === 'processing' && this.isUmiop) ||\r\n        this.lot.status.code === 'receiving' ||\r\n        this.lot.status.code === 'waiting' ||\r\n        (offersConfirmOrCancelledUmiop.length > 0 && this.isUmiop)\r\n      ) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    },\r\n    buttonText() {\r\n      if (this.isUmiop) {\r\n        return 'Согласовать распределение';\r\n      } else {\r\n        return 'Подтвердить распределение';\r\n      }\r\n    },\r\n    isReceivingStatusLot() {\r\n      return this.lot.status.code === 'receiving';\r\n    },\r\n    isWaitingStatusLot() {\r\n      return this.lot.status.code === 'waiting';\r\n    },\r\n    isCompletedStatusLot() {\r\n      return this.lot.status.code === 'completed';\r\n    },\r\n    isCancelledStatusLot() {\r\n      return this.lot.status.code === 'cancelled';\r\n    },\r\n    showFooter() {\r\n      if (\r\n        this.isCompletedStatusLot ||\r\n        this.isCancelledStatusLot ||\r\n        this.isReceivingStatusLot ||\r\n        this.isWaitingStatusLot\r\n      ) {\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n  },\r\n  methods: {\r\n    ...mapActions('offer', ['resetEditedOffers']),\r\n    onSubmit() {\r\n      this.resetEditedOffers();\r\n\r\n      this.isSubmitting = true;\r\n\r\n      if (this.isTrader) {\r\n        this.confirmDescriptionByTrader();\r\n      } else if (this.isUmiop) {\r\n        this.confirmDescriptionByUmiop();\r\n      }\r\n\r\n      setTimeout(() => {\r\n        this.$store.dispatch('lot/getById', { id: this.lot.id });\r\n        this.$store.dispatch('offer/getListByLotId', this.lot.id);\r\n\r\n        this.isSubmitting = false;\r\n      }, 1000);\r\n\r\n      this.resetEditedOffers();\r\n    },\r\n    confirmDescriptionByTrader() {\r\n      this.$store.dispatch('lot/confirmDescriptionByTrader', this.lot.id);\r\n      this.$store.dispatch('offer/confirmDescriptionByTrader', this.offerList);\r\n    },\r\n    confirmDescriptionByUmiop() {\r\n      this.$store.dispatch('offer/confirmDescriptionByUmiop', this.lot.id); // Edited offers is first, because \"isUmiopEdited\" maybe set\r\n      this.$store.dispatch('lot/confirmDescriptionByUmiop', this.lot.id);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped></style>\r\n"]},"metadata":{},"sourceType":"module"}