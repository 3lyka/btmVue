{"ast":null,"code":"import { toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 1,\n  class: \"calendar__lot-sale-button\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createTextVNode(\" Выставлен\");\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $options.showSaleButton ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.setLotForm && $options.setLotForm(...args)),\n    class: _normalizeClass([\"lot-detail__sale-button\", $props.unsoldBalance !== 0 ? 'lot-detail__sale-button_active' : ''])\n  }, _toDisplayString($options.text), 3\n  /* TEXT, CLASS */\n  )) : $props.lot.resoldInLot ? (_openBlock(), _createElementBlock(\"button\", _hoisted_1, [_hoisted_2, _hoisted_3, _createTextVNode(\"в лоте №\" + _toDisplayString($props.lot.resoldInLot), 1\n  /* TEXT */\n  )])) : _createCommentVNode(\"v-if\", true);\n}","map":{"version":3,"mappings":";;;EASsCA,KAAK,EAAC;;;iDAA4B;;gCAC3DC,oBAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM;AAAA;AAAN;;;SARHC,yCADRC,oBAOS,QAPT,EAOS;UAAA;IALNC,OAAK,yCAAEF,mDAAF,CAKC;IAJPF,KAAK,mBAAC,yBAAD,EACGK,yBAAa,CAAb,GAAa,gCAAb,GAAa,EADhB;EAIE,CAPT,mBAMKH,cANL,EAMS;EAAA;EANT,KAQmBG,WAAIC,6BAAvBH,oBAES,QAFT,cAES,aADEI,UACF,mBADQ,aAAQC,iBAAGH,WAAIC,WAAP,GAAkB;EAAA;GAClC,CAFT","names":["class","_createElementVNode","$options","_createElementBlock","onClick","$props","resoldInLot","_hoisted_3","_toDisplayString"],"sourceRoot":"","sources":["C:\\openserver\\domains\\U190001472_BitumMap_Vue\\src\\components\\views\\trading-session\\lot\\LotSaleButton.vue"],"sourcesContent":["<template>\r\n  <button\r\n    v-if=\"showSaleButton\"\r\n    @click=\"setLotForm\"\r\n    class=\"lot-detail__sale-button\"\r\n    :class=\"unsoldBalance !== 0 ? 'lot-detail__sale-button_active' : ''\"\r\n  >\r\n    {{ text }}\r\n  </button>\r\n  <button v-else-if=\"lot.resoldInLot\" class=\"calendar__lot-sale-button\">\r\n    Выставлен<br />в лоте №{{ lot.resoldInLot }}\r\n  </button>\r\n</template>\r\n\r\n<script>\r\nimport { useUserStore } from '@/stores/user';\r\nimport { mapState as mapStatePinia } from 'pinia';\r\n\r\nexport default {\r\n  name: 'LotSaleButton',\r\n  props: ['unsoldBalance', 'lot'],\r\n  computed: {\r\n    ...mapStatePinia(useUserStore, ['isTrader', 'isUmiop']),\r\n    text() {\r\n      const text = 'Продать';\r\n\r\n      return text;\r\n    },\r\n    showSaleButton() {\r\n      const curDay = new Date(\r\n          new Date().getFullYear(),\r\n          new Date().getMonth(),\r\n          new Date().getDate()\r\n        ),\r\n        lotDay = new Date(\r\n          new Date().getFullYear(),\r\n          new Date().getMonth(),\r\n          new Date(this.lot.dateEnd).getDate()\r\n        );\r\n\r\n      if (\r\n        this.isTrader &&\r\n        curDay.getTime() === lotDay.getTime() &&\r\n        (this.lot.status.code === 'completed' ||\r\n          this.lot.status.code === 'cancelled') &&\r\n        this.unsoldBalance > 0 &&\r\n        !this.lot.resoldInLot\r\n      ) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    },\r\n  },\r\n  methods: {\r\n    async setLotForm() {\r\n      const currLot = Object.assign({}, this.lot);\r\n\r\n      currLot.weight = this.unsoldBalance;\r\n\r\n      if (this.$route.name !== 'Calendar') {\r\n        await this.$router.push({ name: 'Calendar' });\r\n      }\r\n\r\n      this.$store.commit('lot/setIsSaleButtonClicked', { value: true });\r\n      this.$store.dispatch('lot/lotFormToSale', currLot);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped></style>\r\n"]},"metadata":{},"sourceType":"module"}