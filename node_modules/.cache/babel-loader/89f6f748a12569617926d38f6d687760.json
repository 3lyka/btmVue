{"ast":null,"code":"import LotTradingList from '@/components/views/trading-session/lot/LotTradingList';\nimport { mapState, mapActions } from 'vuex';\nimport TradingHeader from '@/components/components-helpers/TradingHeader';\nimport { getCurrentInstance, onMounted } from 'vue';\nimport { useInterval } from '@/composables/useInterval';\nexport default {\n  name: 'Trading',\n\n  setup() {\n    const {\n      ctx\n    } = getCurrentInstance();\n    onMounted(() => {\n      ctx.resetEditedOffers();\n      ctx.getLot();\n      ctx.getOffers();\n    }); // делаем запрос на обновление данных, раз в 1 минуту.\n\n    useInterval(() => {\n      ctx.getLot(), ctx.getOffers();\n    }, 60000);\n  },\n\n  computed: { ...mapState({\n      lot: state => state.lot.lot,\n      showUmiopConfirm: state => state.lot.showUmiopConfirm,\n      offerList: state => state.offer.offerList\n    })\n  },\n  methods: { ...mapActions('offer', ['resetEditedOffers']),\n\n    getOffers() {\n      this.$store.dispatch('offer/getListByLotId', this.$route.params.id);\n    },\n\n    getLot() {\n      this.$store.dispatch('lot/getById', {\n        id: this.$route.params.id\n      }).catch(() => {\n        this.$router.push({\n          name: 'Calendar'\n        });\n      });\n    }\n\n  },\n\n  mounted() {\n    this.$store.subscribe(mutations => {\n      if (mutations.type === 'offer/offerFormSuccess') {\n        this.getOffers();\n      }\n    });\n  },\n\n  components: {\n    TradingHeader,\n    LotTradingList\n  }\n};","map":{"version":3,"mappings":"AAMA,OAAOA,cAAP,MAA2B,uDAA3B;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,MAArC;AACA,OAAOC,aAAP,MAA0B,+CAA1B;AACA,SAASC,kBAAT,EAA6BC,SAA7B,QAA8C,KAA9C;AACA,SAASC,WAAT,QAA4B,2BAA5B;AAEA,eAAe;EACbC,IAAI,EAAE,SADO;;EAGbC,KAAK,GAAG;IACN,MAAM;MAAEC;IAAF,IAAUL,kBAAkB,EAAlC;IAEAC,SAAS,CAAC,MAAM;MACdI,GAAG,CAACC,iBAAJ;MACAD,GAAG,CAACE,MAAJ;MACAF,GAAG,CAACG,SAAJ;IACD,CAJQ,CAAT,CAHM,CAQN;;IACAN,WAAW,CAAC,MAAM;MAChBG,GAAG,CAACE,MAAJ,IAAcF,GAAG,CAACG,SAAJ,EAAd;IACD,CAFU,EAER,KAFQ,CAAX;EAGD,CAfY;;EAiBbC,QAAQ,EAAE,EACR,GAAGZ,QAAQ,CAAC;MACVa,GAAG,EAAGC,KAAD,IAAWA,KAAK,CAACD,GAAN,CAAUA,GADhB;MAEVE,gBAAgB,EAAGD,KAAD,IAAWA,KAAK,CAACD,GAAN,CAAUE,gBAF7B;MAGVC,SAAS,EAAGF,KAAD,IAAWA,KAAK,CAACG,KAAN,CAAYD;IAHxB,CAAD;EADH,CAjBG;EAyBbE,OAAO,EAAE,EACP,GAAGjB,UAAU,CAAC,OAAD,EAAU,CAAC,mBAAD,CAAV,CADN;;IAGPU,SAAS,GAAG;MACV,KAAKQ,MAAL,CAAYC,QAAZ,CAAqB,sBAArB,EAA6C,KAAKC,MAAL,CAAYC,MAAZ,CAAmBC,EAAhE;IACD,CALM;;IAMPb,MAAM,GAAG;MACP,KAAKS,MAAL,CACGC,QADH,CACY,aADZ,EAC2B;QAAEG,EAAE,EAAE,KAAKF,MAAL,CAAYC,MAAZ,CAAmBC;MAAzB,CAD3B,EAEGC,KAFH,CAES,MAAM;QACX,KAAKC,OAAL,CAAaC,IAAb,CAAkB;UAAEpB,IAAI,EAAE;QAAR,CAAlB;MACD,CAJH;IAKD;;EAZM,CAzBI;;EAwCbqB,OAAO,GAAG;IACR,KAAKR,MAAL,CAAYS,SAAZ,CAAuBC,SAAD,IAAe;MACnC,IAAIA,SAAS,CAACC,IAAV,KAAmB,wBAAvB,EAAiD;QAC/C,KAAKnB,SAAL;MACF;IACD,CAJD;EAKD,CA9CY;;EA+CboB,UAAU,EAAE;IAAE7B,aAAF;IAAiBH;EAAjB;AA/CC,CAAf","names":["LotTradingList","mapState","mapActions","TradingHeader","getCurrentInstance","onMounted","useInterval","name","setup","ctx","resetEditedOffers","getLot","getOffers","computed","lot","state","showUmiopConfirm","offerList","offer","methods","$store","dispatch","$route","params","id","catch","$router","push","mounted","subscribe","mutations","type","components"],"sourceRoot":"","sources":["C:\\openserver\\domains\\U190001472_BitumMap_Vue\\src\\components\\views\\Trading.vue"],"sourcesContent":["<template>\r\n  <TradingHeader />\r\n  <LotTradingList />\r\n</template>\r\n\r\n<script>\r\nimport LotTradingList from '@/components/views/trading-session/lot/LotTradingList';\r\nimport { mapState, mapActions } from 'vuex';\r\nimport TradingHeader from '@/components/components-helpers/TradingHeader';\r\nimport { getCurrentInstance, onMounted } from 'vue';\r\nimport { useInterval } from '@/composables/useInterval';\r\n\r\nexport default {\r\n  name: 'Trading',\r\n\r\n  setup() {\r\n    const { ctx } = getCurrentInstance();\r\n\r\n    onMounted(() => {\r\n      ctx.resetEditedOffers();\r\n      ctx.getLot();\r\n      ctx.getOffers();\r\n    });\r\n    // делаем запрос на обновление данных, раз в 1 минуту.\r\n    useInterval(() => {\r\n      ctx.getLot(), ctx.getOffers();\r\n    }, 60000);\r\n  },\r\n\r\n  computed: {\r\n    ...mapState({\r\n      lot: (state) => state.lot.lot,\r\n      showUmiopConfirm: (state) => state.lot.showUmiopConfirm,\r\n      offerList: (state) => state.offer.offerList,\r\n    }),\r\n  },\r\n\r\n  methods: {\r\n    ...mapActions('offer', ['resetEditedOffers']),\r\n\r\n    getOffers() {\r\n      this.$store.dispatch('offer/getListByLotId', this.$route.params.id);\r\n    },\r\n    getLot() {\r\n      this.$store\r\n        .dispatch('lot/getById', { id: this.$route.params.id })\r\n        .catch(() => {\r\n          this.$router.push({ name: 'Calendar' });\r\n        });\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    this.$store.subscribe((mutations) => {\r\n      if (mutations.type === 'offer/offerFormSuccess') {\r\n        this.getOffers();\r\n      }\r\n    });\r\n  },\r\n  components: { TradingHeader, LotTradingList },\r\n};\r\n</script>\r\n\r\n<style scoped></style>\r\n"]},"metadata":{},"sourceType":"module"}