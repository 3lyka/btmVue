{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_TradingHeader = _resolveComponent(\"TradingHeader\");\n\n  const _component_LotTradingList = _resolveComponent(\"LotTradingList\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_TradingHeader), _createVNode(_component_LotTradingList)], 64);\n}","map":{"version":3,"mappings":";;;;;;6DACEA,aAAiBC,wBAAjB,GACAD,aAAkBE,yBAAlB","names":["_createVNode","_component_TradingHeader","_component_LotTradingList"],"sourceRoot":"","sources":["C:\\openserver\\domains\\U190001472_BitumMap_Vue\\src\\components\\views\\Trading.vue"],"sourcesContent":["<template>\r\n  <TradingHeader />\r\n  <LotTradingList />\r\n</template>\r\n\r\n<script>\r\nimport LotTradingList from '@/components/views/trading-session/lot/LotTradingList';\r\nimport { mapState, mapActions } from 'vuex';\r\nimport TradingHeader from '@/components/components-helpers/TradingHeader';\r\nimport { getCurrentInstance, onMounted } from 'vue';\r\nimport { useInterval } from '@/composables/useInterval';\r\n\r\nexport default {\r\n  name: 'Trading',\r\n\r\n  setup() {\r\n    const { ctx } = getCurrentInstance();\r\n\r\n    onMounted(() => {\r\n      ctx.resetEditedOffers();\r\n      ctx.getLot();\r\n      ctx.getOffers();\r\n    });\r\n    // делаем запрос на обновление данных, раз в 1 минуту.\r\n    useInterval(() => {\r\n      ctx.getLot(), ctx.getOffers();\r\n    }, 60000);\r\n  },\r\n\r\n  computed: {\r\n    ...mapState({\r\n      lot: (state) => state.lot.lot,\r\n      showUmiopConfirm: (state) => state.lot.showUmiopConfirm,\r\n      offerList: (state) => state.offer.offerList,\r\n    }),\r\n  },\r\n\r\n  methods: {\r\n    ...mapActions('offer', ['resetEditedOffers']),\r\n\r\n    getOffers() {\r\n      this.$store.dispatch('offer/getListByLotId', this.$route.params.id);\r\n    },\r\n    getLot() {\r\n      this.$store\r\n        .dispatch('lot/getById', { id: this.$route.params.id })\r\n        .catch(() => {\r\n          this.$router.push({ name: 'Calendar' });\r\n        });\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    this.$store.subscribe((mutations) => {\r\n      if (mutations.type === 'offer/offerFormSuccess') {\r\n        this.getOffers();\r\n      }\r\n    });\r\n  },\r\n  components: { TradingHeader, LotTradingList },\r\n};\r\n</script>\r\n\r\n<style scoped></style>\r\n"]},"metadata":{},"sourceType":"module"}