{"ast":null,"code":"import CalendarLotFormAddRegionsItem from '@/components/views/trading-session/calendar/CalendarLotFormAddRegionsItem';\nimport PlusIcon from '@/components/components-helpers/icons/PlusIcon.vue';\nimport { useUserStore } from '@/stores/user';\nimport { mapState as mapStatePinia } from 'pinia';\nexport default {\n  name: 'CalendarLotFormAddRegions',\n  props: ['regionListResponse', 'minNomenclaturePrice', 'currentRegions'],\n  emits: ['onSelectRegions', 'onChangeRegions'],\n  data: () => ({\n    arRegionsItem: [{}],\n    selectedRegions: [],\n    arRegions: []\n  }),\n  watch: {\n    currentRegions: {\n      handler(newRegions) {\n        if (this.arRegions.length) return;\n        const regions = newRegions?.map(region => {\n          if (!region?.regionIds) return { ...region,\n            priceMin: region.priceMin\n          }; // приводим regionIds к формату который принимает ElSelect (string[])\n\n          return {\n            priceMin: region.priceMin,\n            regionIds: region.regionIds.map(value => value?.id)\n          };\n        }); // убираем регионы у которых не выбраны регионы\n\n        this.arRegions = regions?.filter(region => region?.regionIds);\n\n        if (!this.arRegions?.length) {\n          this.arRegions = [{}];\n        }\n      },\n\n      immediate: true\n    }\n  },\n  computed: { ...mapStatePinia(useUserStore, ['isTrader', 'isUmiop']),\n\n    availableRegions() {\n      // создаем array с ids [\"1\", \"4\", \"3\"]\n      const selectedRegionsAll = this.arRegions.map(region => region?.regionIds).flat(); // убираем дубликаты и через фильтр убирает undefined\n\n      const selectedRegions = [...new Set(selectedRegionsAll)].filter(value => value);\n      const isAllRegionsSelected = selectedRegions.includes('all');\n\n      if (isAllRegionsSelected) {\n        // если выбраны все регионы, то новые регионы нельзя выбирать.\n        return [];\n      }\n\n      if (selectedRegions.length) {\n        // убираем из выбора 'Все регионы' и если один из регионов выбран, убраем его для последущего выбора.\n        return this.regionListResponse.filter(region => {\n          if (region.ID === 'all') return false;\n          if (!selectedRegions.includes(region.ID)) return true;\n        });\n      }\n\n      return this.regionListResponse;\n    },\n\n    isAddItemDisabled() {\n      // если уже выбраны все возможные регионы, то 'disabled'\n      // или выбранные значения включают 'all', то 'disabled',\n      // или не выбраны никакие значения то также 'disabled'.\n      return !this.availableRegions?.length || this.arRegions?.some(region => region?.regionIds?.includes('all') || !region?.regionIds?.length);\n    }\n\n  },\n  methods: {\n    onChangeRegions(selectRegions, removedRegions, data) {\n      const {\n        index,\n        ...rest\n      } = data;\n      this.arRegions[index] = rest;\n      this.$emit('onChangeRegions', this.arRegions);\n    },\n\n    addItem() {\n      this.arRegions.push({});\n    },\n\n    removeItem(itemIndex) {\n      if (this.arRegions.length > 1) this.arRegions.splice(itemIndex, 1);else {\n        this.arRegions = [{}];\n      }\n    }\n\n  },\n  components: {\n    CalendarLotFormAddRegionsItem,\n    PlusIcon\n  }\n};","map":{"version":3,"mappings":"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","names":["CalendarLotFormAddRegionsItem","PlusIcon","useUserStore","mapState","mapStatePinia","name","props","emits","data","arRegionsItem","selectedRegions","arRegions","watch","currentRegions","handler","newRegions","length","regions","map","region","regionIds","priceMin","value","id","filter","immediate","computed","availableRegions","selectedRegionsAll","flat","Set","isAllRegionsSelected","includes","regionListResponse","ID","isAddItemDisabled","some","methods","onChangeRegions","selectRegions","removedRegions","index","rest","$emit","addItem","push","removeItem","itemIndex","splice","components"],"sourceRoot":"","sources":["C:\\openserver\\domains\\U190001472_BitumMap_Vue\\src\\components\\views\\trading-session\\calendar\\CalendarLotFormAddRegions.vue"],"sourcesContent":["<template>\r\n  <div class=\"regions\">\r\n    <div class=\"regions__title\">\r\n      <div class=\"regions__title-item\">\r\n        <h4 class=\"lot-form__item-box-subtitle\">Регион</h4>\r\n      </div>\r\n      <div class=\"regions__title-item\">\r\n        <h4 class=\"lot-form__item-box-subtitle\">\r\n          Минимальная цена за тонну (без доставки)\r\n        </h4>\r\n      </div>\r\n    </div>\r\n    <CalendarLotFormAddRegionsItem\r\n      v-for=\"(regionItem, index) in arRegions\"\r\n      :key=\"index\"\r\n      :index=\"index\"\r\n      :region=\"regionItem\"\r\n      :availableRegions=\"availableRegions\"\r\n      :regionList=\"regionListResponse\"\r\n      :minNomenclaturePrice=\"minNomenclaturePrice\"\r\n      @onChangeRegions=\"onChangeRegions\"\r\n      @removeItem=\"removeItem\"\r\n    />\r\n    <div v-if=\"!isUmiop\" class=\"lot-form__item-box\">\r\n      <div class=\"region-add\">\r\n        <ElButton\r\n          @click=\"addItem\"\r\n          class=\"region-add__button\"\r\n          :disabled=\"isAddItemDisabled\"\r\n          type=\"primary\"\r\n          text\r\n        >\r\n          Добавить регион\r\n          <PlusIcon class=\"region-add__button-icon\" />\r\n        </ElButton>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport CalendarLotFormAddRegionsItem from '@/components/views/trading-session/calendar/CalendarLotFormAddRegionsItem';\r\nimport PlusIcon from '@/components/components-helpers/icons/PlusIcon.vue';\r\nimport { useUserStore } from '@/stores/user';\r\nimport { mapState as mapStatePinia } from 'pinia';\r\n\r\nexport default {\r\n  name: 'CalendarLotFormAddRegions',\r\n  props: ['regionListResponse', 'minNomenclaturePrice', 'currentRegions'],\r\n  emits: ['onSelectRegions', 'onChangeRegions'],\r\n  data: () => ({\r\n    arRegionsItem: [{}],\r\n    selectedRegions: [],\r\n    arRegions: [],\r\n  }),\r\n  watch: {\r\n    currentRegions: {\r\n      handler(newRegions) {\r\n        if (this.arRegions.length) return;\r\n\r\n        const regions = newRegions?.map((region) => {\r\n          if (!region?.regionIds)\r\n            return { ...region, priceMin: region.priceMin };\r\n\r\n          // приводим regionIds к формату который принимает ElSelect (string[])\r\n          return {\r\n            priceMin: region.priceMin,\r\n            regionIds: region.regionIds.map((value) => value?.id),\r\n          };\r\n        });\r\n\r\n        // убираем регионы у которых не выбраны регионы\r\n        this.arRegions = regions?.filter((region) => region?.regionIds);\r\n\r\n        if (!this.arRegions?.length) {\r\n          this.arRegions = [{}];\r\n        }\r\n      },\r\n      immediate: true,\r\n    },\r\n  },\r\n  computed: {\r\n    ...mapStatePinia(useUserStore, ['isTrader', 'isUmiop']),\r\n    availableRegions() {\r\n      // создаем array с ids [\"1\", \"4\", \"3\"]\r\n      const selectedRegionsAll = this.arRegions\r\n        .map((region) => region?.regionIds)\r\n        .flat();\r\n      // убираем дубликаты и через фильтр убирает undefined\r\n      const selectedRegions = [...new Set(selectedRegionsAll)].filter(\r\n        (value) => value\r\n      );\r\n\r\n      const isAllRegionsSelected = selectedRegions.includes('all');\r\n\r\n      if (isAllRegionsSelected) {\r\n        // если выбраны все регионы, то новые регионы нельзя выбирать.\r\n        return [];\r\n      }\r\n\r\n      if (selectedRegions.length) {\r\n        // убираем из выбора 'Все регионы' и если один из регионов выбран, убраем его для последущего выбора.\r\n        return this.regionListResponse.filter((region) => {\r\n          if (region.ID === 'all') return false;\r\n          if (!selectedRegions.includes(region.ID)) return true;\r\n        });\r\n      }\r\n\r\n      return this.regionListResponse;\r\n    },\r\n\r\n    isAddItemDisabled() {\r\n      // если уже выбраны все возможные регионы, то 'disabled'\r\n      // или выбранные значения включают 'all', то 'disabled',\r\n      // или не выбраны никакие значения то также 'disabled'.\r\n      return (\r\n        !this.availableRegions?.length ||\r\n        this.arRegions?.some(\r\n          (region) =>\r\n            region?.regionIds?.includes('all') || !region?.regionIds?.length\r\n        )\r\n      );\r\n    },\r\n  },\r\n  methods: {\r\n    onChangeRegions(selectRegions, removedRegions, data) {\r\n      const { index, ...rest } = data;\r\n      this.arRegions[index] = rest;\r\n\r\n      this.$emit('onChangeRegions', this.arRegions);\r\n    },\r\n    addItem() {\r\n      this.arRegions.push({});\r\n    },\r\n    removeItem(itemIndex) {\r\n      if (this.arRegions.length > 1) this.arRegions.splice(itemIndex, 1);\r\n      else {\r\n        this.arRegions = [{}];\r\n      }\r\n    },\r\n  },\r\n  components: { CalendarLotFormAddRegionsItem, PlusIcon },\r\n};\r\n</script>\r\n\r\n<style scoped></style>\r\n"]},"metadata":{},"sourceType":"module"}