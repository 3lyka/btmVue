{"ast":null,"code":"import { mapActions } from 'vuex';\nexport default {\n  name: 'LotDetailConfirmUmiop',\n  props: ['umiop', 'lot', 'offerList'],\n\n  data() {\n    return {\n      isSubmitting: false\n    };\n  },\n\n  computed: {\n    isUmiopCheckStatusLot() {\n      return this.lot.status.code === 'umiop_check';\n    },\n\n    countOfferListUmiop() {\n      return this.umiop.offerList.length;\n    },\n\n    umiopOfferListIds() {\n      return this.umiop.offerList.map(offer => offer.id);\n    },\n\n    cancelledOfferListIds() {\n      return this.offerList.map(offer => {\n        if (offer.switchAccepted === false) {\n          return offer.id;\n        }\n      });\n    },\n\n    receivedOfferListIds() {\n      return this.offerList.map(offer => {\n        if (offer.switchAccepted === true) {\n          return offer.id;\n        }\n      });\n    },\n\n    arrWeightSaleOfferList() {\n      return this.offerList.map(offer => {\n        if (offer.switchAccepted === true) {\n          return {\n            id: offer.id,\n            weightSale: offer.weightSale\n          };\n        }\n      });\n    }\n\n  },\n  methods: { ...mapActions('offer', ['resetEditedOffers']),\n\n    onSubmit() {\n      this.resetEditedOffers();\n      this.isSubmitting = true;\n      this.$store.dispatch('offer/setUmiopCheckStatusesByIds', this.umiopOfferListIds);\n      this.$store.dispatch('offer/setCancelledStatusesByIds', this.cancelledOfferListIds);\n      this.$store.dispatch('offer/setWeightSaleByIds', {\n        ids: this.receivedOfferListIds,\n        arrWeightSale: this.arrWeightSaleOfferList\n      });\n      this.$store.dispatch('lot/setUmiopCheckStatusById', this.lot.id);\n      setTimeout(() => {\n        this.$store.dispatch('lot/getById', {\n          id: this.$route.params.id\n        });\n        this.$store.dispatch('offer/getListByLotId', this.$route.params.id);\n        this.isSubmitting = false;\n      }, 1000);\n      this.resetEditedOffers();\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA2BA,SAASA,UAAT,QAA2B,MAA3B;AAEA,eAAe;EACbC,IAAI,EAAE,uBADO;EAEbC,KAAK,EAAE,CAAC,OAAD,EAAU,KAAV,EAAiB,WAAjB,CAFM;;EAGbC,IAAI,GAAG;IACL,OAAO;MACLC,YAAY,EAAE;IADT,CAAP;EAGD,CAPY;;EAQbC,QAAQ,EAAE;IACRC,qBAAqB,GAAG;MACtB,OAAO,KAAKC,GAAL,CAASC,MAAT,CAAgBC,IAAhB,KAAyB,aAAhC;IACD,CAHO;;IAIRC,mBAAmB,GAAG;MACpB,OAAO,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,MAA5B;IACD,CANO;;IAORC,iBAAiB,GAAG;MAClB,OAAO,KAAKH,KAAL,CAAWC,SAAX,CAAqBG,GAArB,CAA0BC,KAAD,IAAWA,KAAK,CAACC,EAA1C,CAAP;IACD,CATO;;IAURC,qBAAqB,GAAG;MACtB,OAAO,KAAKN,SAAL,CAAeG,GAAf,CAAoBC,KAAD,IAAW;QACnC,IAAIA,KAAK,CAACG,cAAN,KAAyB,KAA7B,EAAoC;UAClC,OAAOH,KAAK,CAACC,EAAb;QACF;MACD,CAJM,CAAP;IAKD,CAhBO;;IAiBRG,oBAAoB,GAAG;MACrB,OAAO,KAAKR,SAAL,CAAeG,GAAf,CAAoBC,KAAD,IAAW;QACnC,IAAIA,KAAK,CAACG,cAAN,KAAyB,IAA7B,EAAmC;UACjC,OAAOH,KAAK,CAACC,EAAb;QACF;MACD,CAJM,CAAP;IAKD,CAvBO;;IAwBRI,sBAAsB,GAAG;MACvB,OAAO,KAAKT,SAAL,CAAeG,GAAf,CAAoBC,KAAD,IAAW;QACnC,IAAIA,KAAK,CAACG,cAAN,KAAyB,IAA7B,EAAmC;UACjC,OAAO;YACLF,EAAE,EAAED,KAAK,CAACC,EADL;YAELK,UAAU,EAAEN,KAAK,CAACM;UAFb,CAAP;QAIF;MACD,CAPM,CAAP;IAQD;;EAjCO,CARG;EA2CbC,OAAO,EAAE,EACP,GAAGvB,UAAU,CAAC,OAAD,EAAU,CAAC,mBAAD,CAAV,CADN;;IAGPwB,QAAQ,GAAG;MACT,KAAKC,iBAAL;MAEA,KAAKrB,YAAL,GAAoB,IAApB;MAEA,KAAKsB,MAAL,CAAYC,QAAZ,CACE,kCADF,EAEE,KAAKb,iBAFP;MAIA,KAAKY,MAAL,CAAYC,QAAZ,CACE,iCADF,EAEE,KAAKT,qBAFP;MAIA,KAAKQ,MAAL,CAAYC,QAAZ,CAAqB,0BAArB,EAAiD;QAC/CC,GAAG,EAAE,KAAKR,oBADqC;QAE/CS,aAAa,EAAE,KAAKR;MAF2B,CAAjD;MAIA,KAAKK,MAAL,CAAYC,QAAZ,CAAqB,6BAArB,EAAoD,KAAKpB,GAAL,CAASU,EAA7D;MAEAa,UAAU,CAAC,MAAM;QACf,KAAKJ,MAAL,CAAYC,QAAZ,CAAqB,aAArB,EAAoC;UAAEV,EAAE,EAAE,KAAKc,MAAL,CAAYC,MAAZ,CAAmBf;QAAzB,CAApC;QACA,KAAKS,MAAL,CAAYC,QAAZ,CAAqB,sBAArB,EAA6C,KAAKI,MAAL,CAAYC,MAAZ,CAAmBf,EAAhE;QAEA,KAAKb,YAAL,GAAoB,KAApB;MACD,CALS,EAKP,IALO,CAAV;MAOA,KAAKqB,iBAAL;IACD;;EA9BM;AA3CI,CAAf","names":["mapActions","name","props","data","isSubmitting","computed","isUmiopCheckStatusLot","lot","status","code","countOfferListUmiop","umiop","offerList","length","umiopOfferListIds","map","offer","id","cancelledOfferListIds","switchAccepted","receivedOfferListIds","arrWeightSaleOfferList","weightSale","methods","onSubmit","resetEditedOffers","$store","dispatch","ids","arrWeightSale","setTimeout","$route","params"],"sourceRoot":"","sources":["C:\\openserver\\domains\\U190001472_BitumMap_Vue\\src\\components\\views\\trading-session\\lot\\LotDetailConfirmUmiop.vue"],"sourcesContent":["<template>\r\n  <div class=\"lot-detail__confirm\">\r\n    <div class=\"lot-detail__confirm-item\">\r\n      <p class=\"lot-detail__confirm-item-text\">\r\n        Торговые предложения, требующие согласования\r\n      </p>\r\n      <span class=\"lot-detail__confirm-item-count\">{{\r\n        countOfferListUmiop\r\n      }}</span>\r\n    </div>\r\n    <div\r\n      class=\"lot-detail__confirm-item\"\r\n      :class=\"isUmiopCheckStatusLot ? 'lot-detail__confirm-item_disable' : ''\"\r\n    >\r\n      <ElButton\r\n        @click=\"onSubmit\"\r\n        class=\"lot-detail__confirm-item-button\"\r\n        :disabled=\"isUmiopCheckStatusLot\"\r\n        :loading=\"isSubmitting\"\r\n      >\r\n        Согласовать с УМиОП\r\n      </ElButton>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions } from 'vuex';\r\n\r\nexport default {\r\n  name: 'LotDetailConfirmUmiop',\r\n  props: ['umiop', 'lot', 'offerList'],\r\n  data() {\r\n    return {\r\n      isSubmitting: false,\r\n    };\r\n  },\r\n  computed: {\r\n    isUmiopCheckStatusLot() {\r\n      return this.lot.status.code === 'umiop_check';\r\n    },\r\n    countOfferListUmiop() {\r\n      return this.umiop.offerList.length;\r\n    },\r\n    umiopOfferListIds() {\r\n      return this.umiop.offerList.map((offer) => offer.id);\r\n    },\r\n    cancelledOfferListIds() {\r\n      return this.offerList.map((offer) => {\r\n        if (offer.switchAccepted === false) {\r\n          return offer.id;\r\n        }\r\n      });\r\n    },\r\n    receivedOfferListIds() {\r\n      return this.offerList.map((offer) => {\r\n        if (offer.switchAccepted === true) {\r\n          return offer.id;\r\n        }\r\n      });\r\n    },\r\n    arrWeightSaleOfferList() {\r\n      return this.offerList.map((offer) => {\r\n        if (offer.switchAccepted === true) {\r\n          return {\r\n            id: offer.id,\r\n            weightSale: offer.weightSale,\r\n          };\r\n        }\r\n      });\r\n    },\r\n  },\r\n  methods: {\r\n    ...mapActions('offer', ['resetEditedOffers']),\r\n\r\n    onSubmit() {\r\n      this.resetEditedOffers();\r\n\r\n      this.isSubmitting = true;\r\n\r\n      this.$store.dispatch(\r\n        'offer/setUmiopCheckStatusesByIds',\r\n        this.umiopOfferListIds\r\n      );\r\n      this.$store.dispatch(\r\n        'offer/setCancelledStatusesByIds',\r\n        this.cancelledOfferListIds\r\n      );\r\n      this.$store.dispatch('offer/setWeightSaleByIds', {\r\n        ids: this.receivedOfferListIds,\r\n        arrWeightSale: this.arrWeightSaleOfferList,\r\n      });\r\n      this.$store.dispatch('lot/setUmiopCheckStatusById', this.lot.id);\r\n\r\n      setTimeout(() => {\r\n        this.$store.dispatch('lot/getById', { id: this.$route.params.id });\r\n        this.$store.dispatch('offer/getListByLotId', this.$route.params.id);\r\n\r\n        this.isSubmitting = false;\r\n      }, 1000);\r\n\r\n      this.resetEditedOffers();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped></style>\r\n"]},"metadata":{},"sourceType":"module"}